
This program consists of two parts: the index server and the peer client.

For the whole program:
We try to use the OO design principle to complete this program. So there are some common class defined, such as socket class, thread class, config class and so on. For each those class, they do their job automatically and the user can just call its interface to finish the job.

The server and client side each will have two processes. The purpose is that the first process can monitor the second process in where the multi threads work. It is a robost consider. Also the server can work in the daemon mode.

For the index server part:
There would be one thread listen on the port to receive the connections. I register epoll event for this listen. So the incoming packets can be reached immediately and the cpu time is low. Behind the listen thread, there is a thread pool consists of dynamic number of threads (specifed by config file, so it is static now), to handler all the requests. All the threads share one Resource Manager. The Resource Manager manage all the info collect from peer clients and usef for Register, Search and so on. It is thread safe, since it used the Mutex to lock and unlock each operation. The message between the listen thread and the thread pool is the connected socket. The thread pool would directly receive message from this socket, do processing, and sned back message through this socket. Each pool thread would wait for a sem to begin the job. Also between the client and server, there are types of commands they used to communicate. They are the self-defined struct.

For the peer client part:
There would be one thread to handler the user interactive interface. One thread to listen on the connections who would like to download files. And a pool thread to handler the real download file request. Basically, there are three types of message communicated between each other: Register request, lookup request, download request. They each have command struct.


Some tradeoffs made:
In stead of for each connection to generate a new thread, this program choose the thread pool, in purpose of system resource management and control. In some case like there are hundreds of clients, for each client one thread would be perfect, and this would give all the burden to system resource limitation. The thread pool solution says that when we start the program, we can specify how many threads work in this pool. It needs us to evaluate this number. The advantage is that we may resue the resource more efficient.


Improvements and extensions:
For this p2p sytem, I think those aspects are important:
1. server can be aware of the client's status immediately, like offline or high resource consume, to change the strategy to keep the whole system efficient and robost.
	This program can put the ack packet into the system, the server would be known if one client has not send the ack packet back for a period time. Also, the server can collect those system resource use info from each client to make a more complicated decision for client's reqeust

2. Backup files and server: it is necessary to keep the server alive 7*24 and the files safe.
	Monitor the server is alive, which has been done
	More advance, we can add the mechinism to the whole system if server has down, what should to do. At least, there would be two servers, and each client know their exist. If one server can not respond, the client would automatically change to the other server. Of course, the other server has the same index content with the down server to avoid re-register.

3. Server side efficiency: for now the server resource manager is not enough efficient since of using lock
	The efficiency would be talked in the performance.eval. Maybe should think about it and improve it

4. Long connection: keep the client-server connection alive for a long term	
	For now, all connections between two components are short connection, which means when they send and recv, the socket would be closde. The disadvantage is obviously that it consumes more time to establish those connections. The advantage is also obviously that we may not need to maintain all those connections, especially when there are thousands of clients. Maintain thousands connections is horrible. But there should be some more clever and efficient solutions.








